const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp();

exports.updatePlayerTeam = functions.firestore
  .document('teams/{teamId}')
  .onUpdate((change, context) => {
    const data = change.after.data();
    const previousData = change.before.data();
    const teamId = context.params.teamId;

    // Assuming you have a players array in the team document
    const players = data.players;
    const previousPlayers = previousData.players || [];

    // Find new players that were added to the team
    const addedPlayers = players.filter(
      player => !previousPlayers.includes(player),
    );

    // Update each new player's document with the team ID
    const playerUpdates = addedPlayers.map(player => {
      const playerRef = admin.firestore().collection('players').doc(player.id);
      return playerRef.update({ teamId: teamId });
    });

    return Promise.all(playerUpdates);
  });

exports.syncTeamPlayerUpdates = functions.firestore
  .document('teams/{teamId}')
  .onUpdate(async (change, context) => {
    const teamId = context.params.teamId;
    const beforeData = change.before.data();
    const afterData = change.after.data();

    // Assuming seasonId is stored in the team document
    const seasonId = afterData.seasonId;

    const playerUpdates = [];

    // Add the team ID and season ID to new players
    if (afterData.players) {
      afterData.players.forEach(player => {
        if (player.pastPlayerId) {
          const playerRef = admin
            .firestore()
            .collection('pastPlayers')
            .doc(player.pastPlayerId);
          playerUpdates.push(
            playerRef.update({
              teams: admin.firestore.FieldValue.arrayUnion(teamId),
              seasons: admin.firestore.FieldValue.arrayUnion(seasonId), // Add the season ID
            }),
          );
        }
      });
    }

    // Remove the team ID and season ID from players that are no longer on the team
    if (beforeData.players) {
      const newPlayerIds = new Set(afterData.players.map(p => p.pastPlayerId));
      beforeData.players.forEach(player => {
        if (player.pastPlayerId && !newPlayerIds.has(player.pastPlayerId)) {
          const playerRef = admin
            .firestore()
            .collection('pastPlayers')
            .doc(player.pastPlayerId);
          playerUpdates.push(
            playerRef.update({
              teams: admin.firestore.FieldValue.arrayRemove(teamId),
              seasons: admin.firestore.FieldValue.arrayRemove(seasonId), // Remove the season ID
            }),
          );
        }
      });
    }

    return Promise.all(playerUpdates);
  });
const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp();

exports.syncTeamPlayerUpdates = functions.firestore
  .document('teams/{teamId}')
  .onUpdate(async (change, context) => {
    // Get the team ID
    const teamId = context.params.teamId;

    // Get the before and after update data
    const beforeData = change.before.data();
    const afterData = change.after.data();
    const seasonId = afterData.seasonId;

    const playerUpdates = [];

    // Add the team ID to new players
    if (afterData.players) {
      afterData.players.forEach(player => {
        if (player.pastPlayerId) {
          const playerRef = admin
            .firestore()
            .collection('pastPlayers')
            .doc(player.pastPlayerId);
          playerUpdates.push(
            playerRef.update({
              teams: admin.firestore.FieldValue.arrayUnion(teamId),
              seasons: admin.firestore.FieldValue.arrayUnion(seasonId),
            }),
          );
        }
      });
    }

    // Remove the team ID from players that are no longer on the team
    if (beforeData.players) {
      const newPlayerIds = new Set(afterData.players.map(p => p.pastPlayerId));

      beforeData.players.forEach(player => {
        if (player.pastPlayerId && !newPlayerIds.has(player.pastPlayerId)) {
          const playerRef = admin
            .firestore()
            .collection('pastPlayers')
            .doc(player.pastPlayerId);
          playerUpdates.push(
            playerRef.update({
              teams: admin.firestore.FieldValue.arrayRemove(teamId),
              seasons: admin.firestore.FieldValue.arrayRemove(seasonId),
            }),
          );
        }
      });
    }

    // Wait for all player updates to complete
    return Promise.all(playerUpdates);
  });

exports.onUserCreated = functions.auth.user().onCreate(user => {
  const userId = user.uid;
  const email = user.email;

  return admin.firestore().collection('currentUsers').doc(userId).set({
    email: email,
  });
});
// ...rest of your code

// Add the team ID to new players
if (afterData.players) {
  afterData.players.forEach(player => {
    if (player.pastPlayerId) {
      // Convert email to lowercase
      const pastPlayerIdLower = player.pastPlayerId.toLowerCase();
      const playerRef = admin
        .firestore()
        .collection('pastPlayers')
        .doc(pastPlayerIdLower);
      playerUpdates.push(
        playerRef.update({
          teams: admin.firestore.FieldValue.arrayUnion(teamId),
          seasons: admin.firestore.FieldValue.arrayUnion(seasonId),
        }),
      );
    }
  });
}

// Remove the team ID from players that are no longer on the team
if (beforeData.players) {
  const newPlayerIds = new Set(
    afterData.players.map(p => p.pastPlayerId.toLowerCase()),
  );

  beforeData.players.forEach(player => {
    if (
      player.pastPlayerId &&
      !newPlayerIds.has(player.pastPlayerId.toLowerCase())
    ) {
      const pastPlayerIdLower = player.pastPlayerId.toLowerCase();
      const playerRef = admin
        .firestore()
        .collection('pastPlayers')
        .doc(pastPlayerIdLower);
      playerUpdates.push(
        playerRef.update({
          teams: admin.firestore.FieldValue.arrayRemove(teamId),
          seasons: admin.firestore.FieldValue.arrayRemove(seasonId),
        }),
      );
    }
  });
}

// ...rest of your code
